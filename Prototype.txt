Team Members                                                                               Period
                                        
Jerome Freudenberg                                                                              6 
Tiffany Chen
                                        
Team Name
                                        
JeT Speed (JeT Speed)
                                        
Project Title
                                        
Spell Check
                                        
I. Project Idea
                                        
Create a version of spell check that looks for typos and spelling errors and suggests the word that is most similar
                                        
The user inputs text in the designated text box in the GUI and when a button is pressed, the program will output a corrected version that has fixed the typos and spelling errors in the designated text box in the GUI, along with the number/all the words that were changed. 
                                        
II. Critical Features
                                        
1. References a dictionary
        The spellcheck will use an alphabetically sorted list of all english words to match words from the input and correct them if need be.
                                        
2. Optimization
        In order to lessen the time required for the program to run, the spellcheck will run a binary search for each misspelled word and check their similarity. This involves having multiple dictionaries sorted in different ways (e.g. alphabetically, alphabetically by last letter, by second letter).
                                        
3. Replacement
        The program will use the word that has the highest ratio of matches and replace the misspelled word. Once it has run through the entire inputted text, it returns the corrected version.
                                        
III. To be added later Features
                                        
1. Ability to reject certain suggestions and keep others
2. Suggest more than one word for each error the words
3. Ability to take in a .txt file and return a .txt file in the input
4. Similarity checks based on proximity of letters on keyboard (typo correction)
5. If possible, a faster algorithm for checking all of
                                                        
IV. Development stages:
                                
Phase 1: A simple GUI with input and output text boxes—this will be used to test the rest of our code as we go on
Phase 2: Get a dictionary and sort it into an array (possibly two arrays: one sorted alphabetically and one sorted alphabetically by last letter)
Phase 3: The program can decide whether a word is in the dictionary or not
Phase 4: The program finds words that are similar to a sequence of letters (i.e. one letter off, two letters off, etc.) and compiles a list
Phase 5: The program can take a misspelled word and return the closest match based on the amount of letters that the word is off and how close the missing letters are alphabetically (may be changed to proximity on the keyboard in phase 7)
Phase 6: The program can take in an input of text and return a corrected output
(After phase 6, the project is at its minimum functionality phase.)
Phase 7: This phase is for the “to be added later” features, which are in order of importance above.


List functions needed:
* Function that checks if the word is in the dictionary (return boolean)
* Function that creates arrays sorted in different ways
* Function that compares words
   * Similar letters in similar positions?
      * If correct letter is within one position of correct spot in word
   * Longest common substring?
   * This will probably be the hardest function to code
* Function for input and output
* Main (Jerome if his function is finished early)
* If word changed then add to words changed array
* GUI


Tiffany is blue, Jerome is red